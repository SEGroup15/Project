/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MaintenanceManagement;

import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.temporal.WeekFields;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.Utilities;

/**
 *
 * @author giuse
 */
public class PlannerGUI extends javax.swing.JFrame {

    /**
     * Creates new form PlannerGUI
     */
    private final Connection conn;
    private final Planner Planner;
    private static final String url = "jdbc:postgresql://localhost:5432/locale2";
    private static final String pwd = "kekkeroni";
    private static final String user = "kek";
    private static DefaultTableModel tab;
    private static DefaultTableModel maintainertab;
    /* PlannerRecordGUI attributes */
    private String typeOfActivity;
    private String isInterruptible;
    private boolean firstTable=true;
    private boolean secondTable=false;
    private int daySelected; 
    private int currentID;
    private boolean forwarded;
    
    public PlannerGUI(){       
        initComponents();
        conn = PlannerGUI.startConnection();
        Planner= new Planner("admin","admin","Planner",conn);
        tab = (DefaultTableModel) this.scheduledMaintenanceList.getModel();
        setList(true);
        maintainertab = (DefaultTableModel) this.MainteinerAvailabilityTable.getModel();
         }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlannerRecordGUI = new javax.swing.JFrame();
        jLabel9 = new javax.swing.JLabel();
        FactorySiteTextField = new javax.swing.JTextField();
        ActivityDescriptionTextField = new javax.swing.JTextField();
        ActivityIDTextField = new javax.swing.JTextField();
        CreateButton = new javax.swing.JRadioButton();
        EstimatedTimeTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ActivityTypologyComboBox = new javax.swing.JComboBox<>();
        MaterialsTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        WorkspaceNotes = new javax.swing.JTextArea();
        WeekComboBox = new javax.swing.JComboBox<>();
        AreaDepartmentTextField = new javax.swing.JTextField();
        ActivityLabel = new javax.swing.JLabel();
        DeleteButton = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        ModifyButton = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        NoButton = new javax.swing.JRadioButton();
        YesButton = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        ExecuteButton = new javax.swing.JButton();
        PlannedActivityButton = new javax.swing.JRadioButton();
        EWOActivityButton = new javax.swing.JRadioButton();
        ExtraActivityButton = new javax.swing.JRadioButton();
        ActionType = new javax.swing.ButtonGroup();
        ActivityType = new javax.swing.ButtonGroup();
        InterruptibileActivity = new javax.swing.ButtonGroup();
        PlannerVerificationGUI = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        LabelWeek = new javax.swing.JLabel();
        LabelNWeek = new javax.swing.JLabel();
        Labelact = new javax.swing.JLabel();
        ActivitytoaLabel = new javax.swing.JLabel();
        WorkspaceLabel = new javax.swing.JLabel();
        InterventionLabel = new javax.swing.JLabel();
        LabelSkill = new javax.swing.JLabel();
        ForwardButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        WorkspaceNotesArea = new javax.swing.JTextArea();
        PDFLabel = new javax.swing.JLabel();
        PDFButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tableSkills = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        interventionArea = new javax.swing.JTextArea();
        estimatedTimeEWOField = new javax.swing.JTextField();
        estimatedTimeEWOLabel = new javax.swing.JLabel();
        MaintainerSelectionGUI = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        WeekLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ActivityLabel1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        MainteinerAvailabilityTable = new javax.swing.JTable()
        {
            @Override
            public Component prepareRenderer (TableCellRenderer renderer, int rowIndex, int columnIndex){
                Component component = super.prepareRenderer(renderer, rowIndex, columnIndex);
                Object value = getModel().getValueAt(rowIndex,columnIndex);
                component.setBackground(Color.WHITE);
                component.setForeground(Color.BLACK);

                if (value != null && firstTable==true){
                    if (columnIndex > 1 ){
                        if ((Integer)value == 0){
                            component.setBackground(Color.RED);
                        }
                        else if ((Integer)value > 1 && (Integer)value < 33){
                            component.setBackground(Color.ORANGE);
                        }
                        else if ((Integer)value > 32 && (Integer)value < 66){
                            component.setBackground(Color.YELLOW);
                        }
                        else if ((Integer)value > 65 && (Integer)value < 99){
                            component.setBackground(Color.CYAN);
                        }
                        else if ((Integer)value == 100){
                            component.setBackground(Color.GREEN);
                        }

                    }

                }
                if (value != null && firstTable==false){
                    if (columnIndex > 1){
                        if ((Integer)value == 0){
                            component.setBackground(Color.RED);
                        }
                        else if ((Integer)value >= 1 && (Integer)value <= 20){
                            component.setBackground(Color.ORANGE);
                        }
                        else if ((Integer)value > 20 && (Integer)value <= 35){
                            component.setBackground(Color.YELLOW);
                        }
                        else if ((Integer)value > 35 && (Integer)value <= 50){
                            component.setBackground(Color.CYAN);
                        }
                        else if ((Integer)value > 50 && (Integer)value <= 60){
                            component.setBackground(Color.GREEN);
                        }

                    }

                }
                return component;

            };

        }

        ;
        backButton = new javax.swing.JButton();
        DayLab = new javax.swing.JLabel();
        DayNLabel = new javax.swing.JLabel();
        Workspacenotes3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        WorkspaceTextArea3 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSkills2 = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        LabelWeekNumber = new javax.swing.JTextField();
        comboBoxWeek = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        scheduledMaintenanceList = new javax.swing.JTable();
        buttonManageMaintenance = new javax.swing.JButton();

        PlannerRecordGUI.setMinimumSize(new java.awt.Dimension(958, 500));
        PlannerRecordGUI.getContentPane().setLayout(null);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Week:");
        PlannerRecordGUI.getContentPane().add(jLabel9);
        jLabel9.setBounds(667, 154, 50, 14);
        PlannerRecordGUI.getContentPane().add(FactorySiteTextField);
        FactorySiteTextField.setBounds(88, 212, 203, 30);
        PlannerRecordGUI.getContentPane().add(ActivityDescriptionTextField);
        ActivityDescriptionTextField.setBounds(378, 154, 230, 30);
        PlannerRecordGUI.getContentPane().add(ActivityIDTextField);
        ActivityIDTextField.setBounds(88, 154, 203, 30);

        CreateButton.setBackground(new java.awt.Color(255, 153, 0));
        ActionType.add(CreateButton);
        CreateButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CreateButton.setText("Create");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });
        PlannerRecordGUI.getContentPane().add(CreateButton);
        CreateButton.setBounds(396, 20, 70, 23);

        EstimatedTimeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EstimatedTimeTextFieldActionPerformed(evt);
            }
        });
        PlannerRecordGUI.getContentPane().add(EstimatedTimeTextField);
        EstimatedTimeTextField.setBounds(378, 214, 230, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Area or Department:");
        PlannerRecordGUI.getContentPane().add(jLabel3);
        jLabel3.setBounds(88, 250, 140, 14);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Activity description:");
        PlannerRecordGUI.getContentPane().add(jLabel5);
        jLabel5.setBounds(378, 134, 120, 14);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Estimated intervention time (in minutes):");
        PlannerRecordGUI.getContentPane().add(jLabel6);
        jLabel6.setBounds(378, 194, 240, 14);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Typology of maintenance activity:");
        PlannerRecordGUI.getContentPane().add(jLabel4);
        jLabel4.setBounds(88, 308, 192, 14);

        ActivityTypologyComboBox.setBackground(new java.awt.Color(102, 102, 102));
        ActivityTypologyComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ActivityTypologyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electrical", "Electronic", "Hydraulic", "Mechanical" }));
        ActivityTypologyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActivityTypologyComboBoxActionPerformed(evt);
            }
        });
        PlannerRecordGUI.getContentPane().add(ActivityTypologyComboBox);
        ActivityTypologyComboBox.setBounds(88, 328, 200, 30);
        PlannerRecordGUI.getContentPane().add(MaterialsTextField);
        MaterialsTextField.setBounds(378, 319, 230, 30);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Factory site:");
        PlannerRecordGUI.getContentPane().add(jLabel7);
        jLabel7.setBounds(88, 192, 80, 14);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Type of activity:");
        PlannerRecordGUI.getContentPane().add(jLabel11);
        jLabel11.setBounds(287, 65, 100, 14);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Workspace notes:");
        PlannerRecordGUI.getContentPane().add(jLabel10);
        jLabel10.setBounds(667, 205, 120, 14);

        WorkspaceNotes.setColumns(20);
        WorkspaceNotes.setRows(5);
        jScrollPane2.setViewportView(WorkspaceNotes);

        PlannerRecordGUI.getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(667, 225, 210, 110);

        WeekComboBox.setBackground(new java.awt.Color(102, 102, 102));
        WeekComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        WeekComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52" }));
        WeekComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeekComboBoxActionPerformed(evt);
            }
        });
        PlannerRecordGUI.getContentPane().add(WeekComboBox);
        WeekComboBox.setBounds(667, 174, 50, 30);
        PlannerRecordGUI.getContentPane().add(AreaDepartmentTextField);
        AreaDepartmentTextField.setBounds(88, 270, 203, 30);

        ActivityLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ActivityLabel.setText("Activity ID:");
        PlannerRecordGUI.getContentPane().add(ActivityLabel);
        ActivityLabel.setBounds(88, 134, 80, 14);

        DeleteButton.setBackground(new java.awt.Color(255, 153, 0));
        ActionType.add(DeleteButton);
        DeleteButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        PlannerRecordGUI.getContentPane().add(DeleteButton);
        DeleteButton.setBounds(548, 20, 70, 23);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Type of action:");
        PlannerRecordGUI.getContentPane().add(jLabel13);
        jLabel13.setBounds(290, 24, 100, 14);

        ModifyButton.setBackground(new java.awt.Color(255, 153, 0));
        ActionType.add(ModifyButton);
        ModifyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ModifyButton.setText("Modify");
        ModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyButtonActionPerformed(evt);
            }
        });
        PlannerRecordGUI.getContentPane().add(ModifyButton);
        ModifyButton.setBounds(473, 20, 70, 23);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Materials:");
        PlannerRecordGUI.getContentPane().add(jLabel8);
        jLabel8.setBounds(378, 293, 70, 14);

        jPanel4.setBackground(new java.awt.Color(255, 153, 0));
        jPanel4.setInheritsPopupMenu(true);
        jPanel4.setMinimumSize(new java.awt.Dimension(30000, 30000));
        jPanel4.setPreferredSize(new java.awt.Dimension(30000, 30000));

        NoButton.setBackground(new java.awt.Color(255, 153, 0));
        InterruptibileActivity.add(NoButton);
        NoButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        NoButton.setText("No");
        NoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoButtonActionPerformed(evt);
            }
        });

        YesButton.setBackground(new java.awt.Color(255, 153, 0));
        InterruptibileActivity.add(YesButton);
        YesButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        YesButton.setText("Yes");
        YesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YesButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Interruptible activity:");

        ExecuteButton.setBackground(new java.awt.Color(0, 0, 0));
        ExecuteButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ExecuteButton.setForeground(new java.awt.Color(255, 255, 255));
        ExecuteButton.setText("EXECUTE");
        ExecuteButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteButtonActionPerformed(evt);
            }
        });

        PlannedActivityButton.setBackground(new java.awt.Color(255, 153, 0));
        ActivityType.add(PlannedActivityButton);
        PlannedActivityButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PlannedActivityButton.setText("Planned");
        PlannedActivityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlannedActivityButtonActionPerformed(evt);
            }
        });

        EWOActivityButton.setBackground(new java.awt.Color(255, 153, 0));
        ActivityType.add(EWOActivityButton);
        EWOActivityButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        EWOActivityButton.setText("EWO");
        EWOActivityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EWOActivityButtonActionPerformed(evt);
            }
        });

        ExtraActivityButton.setBackground(new java.awt.Color(255, 153, 0));
        ActivityType.add(ExtraActivityButton);
        ExtraActivityButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ExtraActivityButton.setText("Extra");
        ExtraActivityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtraActivityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(379, 379, 379)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(YesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(709, 709, 709)
                        .addComponent(ExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(394, 394, 394)
                        .addComponent(PlannedActivityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EWOActivityButton)
                        .addGap(21, 21, 21)
                        .addComponent(ExtraActivityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29166, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlannedActivityButton)
                    .addComponent(EWOActivityButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExtraActivityButton))
                .addGap(179, 179, 179)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(YesButton)
                    .addComponent(NoButton))
                .addGap(65, 65, 65)
                .addComponent(ExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29600, Short.MAX_VALUE))
        );

        PlannerRecordGUI.getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 30000, 30000);

        PlannerVerificationGUI.setMinimumSize(new java.awt.Dimension(760, 400));
        PlannerVerificationGUI.setPreferredSize(new java.awt.Dimension(760, 400));

        jPanel1.setBackground(new java.awt.Color(255, 153, 0));
        jPanel1.setMinimumSize(new java.awt.Dimension(780, 420));
        jPanel1.setPreferredSize(new java.awt.Dimension(780, 420));
        jPanel1.setLayout(null);

        LabelWeek.setBackground(new java.awt.Color(255, 255, 255));
        LabelWeek.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelWeek.setText("     Week n°");
        LabelWeek.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelWeek.setOpaque(true);
        jPanel1.add(LabelWeek);
        LabelWeek.setBounds(32, 21, 129, 41);

        LabelNWeek.setBackground(new java.awt.Color(102, 102, 102));
        LabelNWeek.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        LabelNWeek.setForeground(new java.awt.Color(255, 255, 255));
        LabelNWeek.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelNWeek.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelNWeek.setOpaque(true);
        jPanel1.add(LabelNWeek);
        LabelNWeek.setBounds(193, 21, 54, 41);

        Labelact.setBackground(new java.awt.Color(255, 255, 255));
        Labelact.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Labelact.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Labelact.setText("<html>  Activity to\n  assign");
        Labelact.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Labelact.setOpaque(true);
        jPanel1.add(Labelact);
        Labelact.setBounds(253, 21, 176, 41);

        ActivitytoaLabel.setBackground(new java.awt.Color(102, 102, 102));
        ActivitytoaLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ActivitytoaLabel.setForeground(new java.awt.Color(255, 255, 255));
        ActivitytoaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ActivitytoaLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ActivitytoaLabel.setOpaque(true);
        jPanel1.add(ActivitytoaLabel);
        ActivitytoaLabel.setBounds(463, 21, 276, 41);

        WorkspaceLabel.setBackground(new java.awt.Color(255, 204, 102));
        WorkspaceLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        WorkspaceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WorkspaceLabel.setText("Workspace Notes");
        WorkspaceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        WorkspaceLabel.setOpaque(true);
        jPanel1.add(WorkspaceLabel);
        WorkspaceLabel.setBounds(32, 80, 215, 43);

        InterventionLabel.setBackground(new java.awt.Color(255, 204, 102));
        InterventionLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        InterventionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        InterventionLabel.setText("Intervention Description");
        InterventionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        InterventionLabel.setOpaque(true);
        jPanel1.add(InterventionLabel);
        InterventionLabel.setBounds(253, 80, 219, 43);

        LabelSkill.setBackground(new java.awt.Color(255, 204, 102));
        LabelSkill.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelSkill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelSkill.setText("Skills needed");
        LabelSkill.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelSkill.setOpaque(true);
        jPanel1.add(LabelSkill);
        LabelSkill.setBounds(490, 80, 249, 43);

        ForwardButton.setBackground(new java.awt.Color(0, 0, 0));
        ForwardButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ForwardButton.setForeground(new java.awt.Color(255, 255, 255));
        ForwardButton.setText("FORWARD");
        ForwardButton.setBorderPainted(false);
        ForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForwardButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ForwardButton);
        ForwardButton.setBounds(523, 275, 188, 43);

        WorkspaceNotesArea.setColumns(20);
        WorkspaceNotesArea.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        WorkspaceNotesArea.setRows(5);
        jScrollPane5.setViewportView(WorkspaceNotesArea);

        jPanel1.add(jScrollPane5);
        jScrollPane5.setBounds(32, 129, 215, 167);

        PDFLabel.setBackground(new java.awt.Color(255, 255, 255));
        PDFLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PDFLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PDFLabel.setText("<html>Standard\nMaintenance\nProcedure File\n(SMP)");
        PDFLabel.setOpaque(true);
        jPanel1.add(PDFLabel);
        PDFLabel.setBounds(370, 250, 96, 86);

        PDFButton.setBackground(new java.awt.Color(255, 102, 0));
        PDFButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        PDFButton.setText("PDF");
        PDFButton.setBorderPainted(false);
        PDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PDFButtonActionPerformed(evt);
            }
        });
        jPanel1.add(PDFButton);
        PDFButton.setBounds(250, 250, 119, 86);

        tableSkills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tableSkills);
        if (tableSkills.getColumnModel().getColumnCount() > 0) {
            tableSkills.getColumnModel().getColumn(0).setResizable(false);
            tableSkills.getColumnModel().getColumn(1).setResizable(false);
            tableSkills.getColumnModel().getColumn(2).setResizable(false);
            tableSkills.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel1.add(jScrollPane8);
        jScrollPane8.setBounds(490, 130, 250, 140);

        interventionArea.setColumns(20);
        interventionArea.setRows(5);
        jScrollPane4.setViewportView(interventionArea);

        jPanel1.add(jScrollPane4);
        jScrollPane4.setBounds(253, 129, 219, 114);
        jPanel1.add(estimatedTimeEWOField);
        estimatedTimeEWOField.setBounds(360, 250, 110, 30);

        estimatedTimeEWOLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        estimatedTimeEWOLabel.setText("Estimated Time:");
        jPanel1.add(estimatedTimeEWOLabel);
        estimatedTimeEWOLabel.setBounds(260, 260, 100, 14);

        javax.swing.GroupLayout PlannerVerificationGUILayout = new javax.swing.GroupLayout(PlannerVerificationGUI.getContentPane());
        PlannerVerificationGUI.getContentPane().setLayout(PlannerVerificationGUILayout);
        PlannerVerificationGUILayout.setHorizontalGroup(
            PlannerVerificationGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PlannerVerificationGUILayout.setVerticalGroup(
            PlannerVerificationGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        MaintainerSelectionGUI.setBackground(new java.awt.Color(255, 153, 51));
        MaintainerSelectionGUI.setMinimumSize(new java.awt.Dimension(1250, 450));
        MaintainerSelectionGUI.setPreferredSize(new java.awt.Dimension(1250, 450));

        jPanel2.setBackground(new java.awt.Color(255, 153, 0));
        jPanel2.setMinimumSize(new java.awt.Dimension(1250, 450));
        jPanel2.setPreferredSize(new java.awt.Dimension(1250, 450));
        jPanel2.setLayout(null);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Week n°");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setOpaque(true);
        jPanel2.add(jLabel1);
        jLabel1.setBounds(30, 25, 128, 43);

        WeekLabel.setBackground(new java.awt.Color(102, 102, 102));
        WeekLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        WeekLabel.setForeground(new java.awt.Color(255, 255, 255));
        WeekLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WeekLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        WeekLabel.setOpaque(true);
        jPanel2.add(WeekLabel);
        WeekLabel.setBounds(168, 26, 64, 43);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html>Activity to assign");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel2.setOpaque(true);
        jPanel2.add(jLabel2);
        jLabel2.setBounds(342, 26, 132, 43);

        ActivityLabel1.setBackground(new java.awt.Color(102, 102, 102));
        ActivityLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        ActivityLabel1.setForeground(new java.awt.Color(255, 255, 255));
        ActivityLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ActivityLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ActivityLabel1.setOpaque(true);
        jPanel2.add(ActivityLabel1);
        ActivityLabel1.setBounds(480, 26, 582, 43);

        jLabel14.setBackground(new java.awt.Color(255, 204, 102));
        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Skills needed");
        jLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel14.setOpaque(true);
        jPanel2.add(jLabel14);
        jLabel14.setBounds(30, 124, 227, 38);

        jLabel15.setBackground(new java.awt.Color(255, 204, 102));
        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Mainteiner Availability");
        jLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel15.setOpaque(true);
        jPanel2.add(jLabel15);
        jLabel15.setBounds(473, 124, 724, 38);

        MainteinerAvailabilityTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        MainteinerAvailabilityTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        MainteinerAvailabilityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manteiner", "Skills", "Availab. Mon", "Availab. Tue", "Availab. Wed", "Availab. Thu", "Availab. Fri", "Availab. Sat", "Availab. Sun"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MainteinerAvailabilityTable.setGridColor(new java.awt.Color(0, 0, 0));
        MainteinerAvailabilityTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        MainteinerAvailabilityTable.setRowHeight(40);
        MainteinerAvailabilityTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        MainteinerAvailabilityTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MainteinerAvailabilityTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(MainteinerAvailabilityTable);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(473, 168, 724, 187);

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel2.add(backButton);
        backButton.setBounds(30, 373, 61, 23);
        backButton.setVisible(false);

        DayLab.setBackground(new java.awt.Color(255, 255, 255));
        DayLab.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        DayLab.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DayLab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DayLab.setOpaque(true);
        jPanel2.add(DayLab);
        DayLab.setBounds(30, 74, 128, 43);

        DayNLabel.setBackground(new java.awt.Color(102, 102, 102));
        DayNLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        DayNLabel.setForeground(new java.awt.Color(255, 255, 255));
        DayNLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DayNLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DayNLabel.setOpaque(true);
        jPanel2.add(DayNLabel);
        DayNLabel.setBounds(168, 75, 64, 43);

        Workspacenotes3.setBackground(new java.awt.Color(255, 204, 102));
        Workspacenotes3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Workspacenotes3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Workspacenotes3.setText("Workspace notes");
        Workspacenotes3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Workspacenotes3.setOpaque(true);
        jPanel2.add(Workspacenotes3);
        Workspacenotes3.setBounds(263, 124, 204, 38);

        WorkspaceTextArea3.setEditable(false);
        WorkspaceTextArea3.setColumns(20);
        WorkspaceTextArea3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        WorkspaceTextArea3.setRows(5);
        jScrollPane7.setViewportView(WorkspaceTextArea3);

        jPanel2.add(jScrollPane7);
        jScrollPane7.setBounds(263, 168, 204, 187);

        tableSkills2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableSkills2);
        if (tableSkills2.getColumnModel().getColumnCount() > 0) {
            tableSkills2.getColumnModel().getColumn(0).setResizable(false);
            tableSkills2.getColumnModel().getColumn(1).setResizable(false);
            tableSkills2.getColumnModel().getColumn(2).setResizable(false);
            tableSkills2.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(30, 170, 230, 190);

        javax.swing.GroupLayout MaintainerSelectionGUILayout = new javax.swing.GroupLayout(MaintainerSelectionGUI.getContentPane());
        MaintainerSelectionGUI.getContentPane().setLayout(MaintainerSelectionGUILayout);
        MaintainerSelectionGUILayout.setHorizontalGroup(
            MaintainerSelectionGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MaintainerSelectionGUILayout.setVerticalGroup(
            MaintainerSelectionGUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MaintainerSelectionGUILayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel26.setBackground(new java.awt.Color(255, 153, 0));
        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("Mantainer");
        jLabel26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 102), 3));
        jLabel26.setOpaque(true);

        jLabel34.setBackground(new java.awt.Color(255, 153, 0));
        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Mantainer");
        jLabel34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 102)));
        jLabel34.setOpaque(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PlannerGUI");
        setMaximumSize(new java.awt.Dimension(800, 500));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setPreferredSize(new java.awt.Dimension(800, 500));
        getContentPane().setLayout(null);

        jPanel3.setBackground(new java.awt.Color(255, 153, 0));
        jPanel3.setMinimumSize(new java.awt.Dimension(30000, 30000));

        LabelWeekNumber.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        LabelWeekNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        LabelWeekNumber.setText("WEEK N°");
        LabelWeekNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LabelWeekNumber.setFocusable(false);
        LabelWeekNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabelWeekNumberActionPerformed(evt);
            }
        });

        comboBoxWeek.setBackground(new java.awt.Color(102, 102, 102));
        comboBoxWeek.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboBoxWeek.setForeground(new java.awt.Color(102, 102, 102));
        comboBoxWeek.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52" }));
        comboBoxWeek.setSelectedItem(2);
        comboBoxWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxWeekActionPerformed(evt);
            }
        });

        scheduledMaintenanceList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scheduledMaintenanceList.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        scheduledMaintenanceList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "AREA", "TYPE", "Estimated intervention time [min]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scheduledMaintenanceList.setMaximumSize(new java.awt.Dimension(800, 400));
        scheduledMaintenanceList.setMinimumSize(new java.awt.Dimension(800, 400));
        scheduledMaintenanceList.setPreferredSize(new java.awt.Dimension(800, 400));
        scheduledMaintenanceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scheduledMaintenanceListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(scheduledMaintenanceList);
        if (scheduledMaintenanceList.getColumnModel().getColumnCount() > 0) {
            scheduledMaintenanceList.getColumnModel().getColumn(0).setHeaderValue("ID");
            scheduledMaintenanceList.getColumnModel().getColumn(1).setHeaderValue("AREA");
            scheduledMaintenanceList.getColumnModel().getColumn(2).setHeaderValue("TYPE");
            scheduledMaintenanceList.getColumnModel().getColumn(3).setHeaderValue("Estimated intervention time [min]");
        }

        buttonManageMaintenance.setBackground(new java.awt.Color(0, 0, 0));
        buttonManageMaintenance.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonManageMaintenance.setForeground(new java.awt.Color(255, 255, 255));
        buttonManageMaintenance.setText("MANAGE MAINTENANCE");
        buttonManageMaintenance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonManageMaintenanceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonManageMaintenance)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(LabelWeekNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(11, 11, 11)
                            .addComponent(comboBoxWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29201, 29201, 29201))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelWeekNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(comboBoxWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonManageMaintenance, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 0, 30000, 30000);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonManageMaintenanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonManageMaintenanceActionPerformed
        PlannerRecordGUI.setVisible(true);
    }//GEN-LAST:event_buttonManageMaintenanceActionPerformed

    private void ExtraActivityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtraActivityButtonActionPerformed
        typeOfActivity = "extra";
    }//GEN-LAST:event_ExtraActivityButtonActionPerformed

    private void YesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YesButtonActionPerformed
        isInterruptible = "Yes";
    }//GEN-LAST:event_YesButtonActionPerformed

    private void NoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoButtonActionPerformed
        isInterruptible = "No";
    }//GEN-LAST:event_NoButtonActionPerformed

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        PlannedActivityButton.setEnabled(true);
        EWOActivityButton.setEnabled(true);
        ExtraActivityButton.setEnabled(true);
        FactorySiteTextField.setEnabled(true);
        AreaDepartmentTextField.setEnabled(true);
        ActivityTypologyComboBox.setEnabled(true);
        ActivityDescriptionTextField.setEnabled(true);
        EstimatedTimeTextField.setEnabled(true);
        YesButton.setEnabled(true);
        NoButton.setEnabled(true);
        MaterialsTextField.setEnabled(true);
        WeekComboBox.setEnabled(true);
        WorkspaceNotes.setEnabled(true);

    }//GEN-LAST:event_CreateButtonActionPerformed

    private void EstimatedTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EstimatedTimeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EstimatedTimeTextFieldActionPerformed

    private void EWOActivityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EWOActivityButtonActionPerformed
        typeOfActivity = "EWO";
    }//GEN-LAST:event_EWOActivityButtonActionPerformed

    private void ActivityTypologyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActivityTypologyComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ActivityTypologyComboBoxActionPerformed

    private void PlannedActivityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlannedActivityButtonActionPerformed
        typeOfActivity = "planned";
    }//GEN-LAST:event_PlannedActivityButtonActionPerformed

    private void WeekComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeekComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeekComboBoxActionPerformed

    private void ExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteButtonActionPerformed
        boolean interruptible;
        if (isInterruptible == "Yes"){
            interruptible= true;
        }
        else{
            interruptible= false;
        }

        if (!(CreateButton.isSelected()) && !(ModifyButton.isSelected()) && !(DeleteButton.isSelected())){
            JOptionPane.showMessageDialog(null, "A type of action must be selected!", "Error!", 0);
        }

        if (CreateButton.isSelected()){
            if (ActivityIDTextField.getText().isEmpty() || FactorySiteTextField.getText().isEmpty() || AreaDepartmentTextField.getText().isEmpty() || ActivityDescriptionTextField.getText().isEmpty() || EstimatedTimeTextField.getText().isEmpty() || (!(PlannedActivityButton.isSelected()) && !(EWOActivityButton.isSelected()) && !(ExtraActivityButton.isSelected())) || (!(YesButton.isSelected()) && !(NoButton.isSelected()))){
                JOptionPane.showMessageDialog(null, "Some fields have not been filled in!", "Error!", 0);
            }
            else if (!isNumeric(EstimatedTimeTextField.getText())){
                JOptionPane.showMessageDialog(null, "Estimated time must be a number!", "Error!", 0);
            }
            else if (!isNumeric(ActivityIDTextField.getText()) || Integer.parseInt(ActivityIDTextField.getText()) < 1){
                JOptionPane.showMessageDialog(null, "Activity ID must be a number!", "Error!", 0);
            }
            else{
                int activityID = Integer.parseInt(ActivityIDTextField.getText());
                String factorySite = FactorySiteTextField.getText();
                String areaOrDepartment = AreaDepartmentTextField.getText();
                String activityTypology = (ActivityTypologyComboBox.getItemAt(ActivityTypologyComboBox.getSelectedIndex())).toLowerCase();
                String activityDescription = ActivityDescriptionTextField.getText();
                int interventionTime = Integer.parseInt(EstimatedTimeTextField.getText());
                String materials = MaterialsTextField.getText();
                int weeks = WeekComboBox.getSelectedIndex() + 1;
                String workspaceNotes = WorkspaceNotes.getText();

                try{
                    Procedure p = new Procedure("pr1");
                    Activity a = Planner.createActivity(activityID, factorySite, areaOrDepartment, activityTypology, activityDescription, interventionTime, interruptible, materials, weeks, workspaceNotes,p,typeOfActivity);
                    Planner.addActivity(a);
                    setList(false);
                    JOptionPane.showMessageDialog(null,"Type of activity:  " + typeOfActivity + "\n" + "Activity ID:  " +  activityID + "\n" + "Factory site:  " + factorySite + "\n" + "Area/Department:  " + areaOrDepartment + "\n" + "Typology of activity:  " + activityTypology + "\n" + "Activity description:  " + activityDescription + "\n" + "Estimated intervention time:  " + interventionTime + "\n" + "Is it an interruptible activity?  " + isInterruptible + "\n" + "Materials to be used:  " +  materials + "\n" + "Weeks to carry out the activity:  " + weeks + "\n" + "Workspace notes:  " + workspaceNotes, "Activity Information:",1);
                    ActivityIDTextField.setText(null);
                    FactorySiteTextField.setText(null);
                    AreaDepartmentTextField.setText(null);
                    ActivityDescriptionTextField.setText(null);
                    EstimatedTimeTextField.setText(null);
                    MaterialsTextField.setText(null);
                    WorkspaceNotes.setText(null);    
                }
                catch (SQLException e){
                    System.out.println(e.getMessage());
                    JOptionPane.showMessageDialog(null, "An activity with the same ID already exists!", "Error",0);
                    ActivityIDTextField.setText(null);
                }

                
            }
        }

        if (ModifyButton.isSelected()){
            if (ActivityIDTextField.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No activity ID was specified", "Error!", 0);
            }
            else{
                try{
                    int activityID = Integer.parseInt(ActivityIDTextField.getText());
                    String workspaceNotes = WorkspaceNotes.getText();
                    Planner.modifyActivity(activityID, workspaceNotes);
                    JOptionPane.showMessageDialog(null, "The workspace notes have been modified","Modify",1);
                    ActivityIDTextField.setText(null);
                    WorkspaceNotes.setText(null);
                    setList(false);
                }
                catch (java.sql.SQLException e){
                    System.out.println(e.getMessage());
                }
            }
        }

        if (DeleteButton.isSelected()){
            if (ActivityIDTextField.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "No activity ID was specified", "Error!", 0);
            }
            else{
                try{
                    int activityID = Integer.parseInt(ActivityIDTextField.getText());
                    Planner.deleteActivity(activityID);
                    JOptionPane.showMessageDialog(null, "The activity has been deleted","Delete",1);
                    ActivityIDTextField.setText(null);
                    setList(false);
                }
                catch (java.sql.SQLException e){
                    System.out.println(e.getMessage());
                }
            }
        }

    }//GEN-LAST:event_ExecuteButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        PlannedActivityButton.setEnabled(false);
        EWOActivityButton.setEnabled(false);
        ExtraActivityButton.setEnabled(false);
        FactorySiteTextField.setEnabled(false);
        AreaDepartmentTextField.setEnabled(false);
        ActivityTypologyComboBox.setEnabled(false);
        ActivityDescriptionTextField.setEnabled(false);
        EstimatedTimeTextField.setEnabled(false);
        YesButton.setEnabled(false);
        NoButton.setEnabled(false);
        MaterialsTextField.setEnabled(false);
        WeekComboBox.setEnabled(false);
        WorkspaceNotes.setEnabled(false);
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void ModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyButtonActionPerformed
        PlannedActivityButton.setEnabled(false);
        EWOActivityButton.setEnabled(false);
        ExtraActivityButton.setEnabled(false);
        FactorySiteTextField.setEnabled(false);
        AreaDepartmentTextField.setEnabled(false);
        ActivityTypologyComboBox.setEnabled(false);
        ActivityDescriptionTextField.setEnabled(false);
        EstimatedTimeTextField.setEnabled(false);
        YesButton.setEnabled(false);
        NoButton.setEnabled(false);
        MaterialsTextField.setEnabled(false);
        WeekComboBox.setEnabled(false);
        WorkspaceNotes.setEnabled(true);
    }//GEN-LAST:event_ModifyButtonActionPerformed

    private void PDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PDFButtonActionPerformed
        try {
            java.awt.Desktop.getDesktop().browse(new URI("https://www.usbr.gov/power/data/fist/fist4_1a/4-1A.pdf"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PDFButtonActionPerformed

    private void ForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForwardButtonActionPerformed
        firstTable=true;
        forwarded = true;
        try {

            Planner.modifyActivity(currentID,WorkspaceNotesArea.getText());
            MaintainerSelectionGUI.setVisible(true);
            WeekLabel.setText(LabelNWeek.getText());
            ActivityLabel1.setText(ActivitytoaLabel.getText());
            
            setMaintainerList(currentID);
            String[] lista =null;
            if(Planner.getActivity(currentID).getType().equals("EWO") || Planner.getActivity(currentID).getType().equals("extra") ){
                DefaultTableModel model = (DefaultTableModel)tableSkills.getModel();
                int i=0;
                int j=0;
                lista = new String[model.getRowCount()];
                while (i<model.getRowCount()){
                if (model.getValueAt(i, 1)!=null && model.getValueAt(i, 1).equals(true)){
                    lista[j]=(String.valueOf(model.getValueAt(i, 0)));
                    j++;
                }
                i++;
                }                
            }
            querySkill(currentID,tableSkills2,lista);
            
            } catch (SQLException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_ForwardButtonActionPerformed

    private void MainteinerAvailabilityTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainteinerAvailabilityTableMouseClicked
        if (firstTable==true){       
        int indexRow = MainteinerAvailabilityTable.getSelectedRow();
        int indexCol = MainteinerAvailabilityTable.getSelectedColumn();
        String maintainer = (String) MainteinerAvailabilityTable.getValueAt(indexRow,0);
        String skills = (String) MainteinerAvailabilityTable.getValueAt(indexRow,1);
        daySelected = indexCol-1;
        if(true){
                WorkspaceTextArea3.setText(WorkspaceNotesArea.getText());
                DayLab.setText(getDay());
                        
            }
        int[] vec= null;
        if (daySelected>=1 && daySelected<=7){
            try {
                vec = Planner.getArray(maintainer, Planner.getActivity(currentID), daySelected);
            } catch (SQLException ex) {
                Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            String[] nomi = {"Maintainer","Skills","8:00-9:00","9:00-10:00","10:00-11:00","11:00-12:00","14:00-15:00","15:00-16:00","16:00-17:00"};
            maintainertab.setRowCount(0);
            maintainertab.setColumnIdentifiers(nomi);
            Object[] row = new Object[9];
            row[0]=maintainer;
            row[1]=skills;
            row[2]=vec[0];
            row[3]=vec[1];
            row[4]=vec[2];
            row[5]=vec[3];
            row[6]=vec[4];
            row[7]=vec[5];
            row[8]=vec[6];       
            maintainertab.addRow(row);
            backButton.setVisible(true);
            firstTable=false;
        }
        else if (JOptionPane.showConfirmDialog(null, "Wrong Selection!", "Wrong", JOptionPane.OK_CANCEL_OPTION)>=0){
            SwingUtilities.invokeLater(new Runnable(){
            @Override
            public void run() {
                try {
                    firstTable=true;
                    wrongSelectionFunction();
                } catch (SQLException ex) {
                    Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InsertException ex) {
                    Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }    
           });
        }
                 
        
    }
        else{
            if (daySelected>=1 && daySelected<=7){
            int indexRow = MainteinerAvailabilityTable.getSelectedRow();
            int indexCol = MainteinerAvailabilityTable.getSelectedColumn();
            String maintainer = (String) MainteinerAvailabilityTable.getValueAt(indexRow,0);
            String skills = (String) MainteinerAvailabilityTable.getValueAt(indexRow,1);
            int fascia = indexCol-1;
            int[] vec =null;
            try {
                Planner.manageAvailability(Planner.getArray(maintainer, Planner.getActivity(currentID), daySelected),
                        maintainer, daySelected, fascia, Planner.getActivity(currentID));
                vec = Planner.getArray(maintainer, Planner.getActivity(currentID), daySelected);
                String[] nomi = {"Maintainer","Skills","8:00-9:00","9:00-10:00","10:00-11:00","11:00-12:00","14:00-15:00","15:00-16:00","16:00-17:00"};
                maintainertab.setRowCount(0);
                maintainertab.setColumnIdentifiers(nomi);
                Object[] row = new Object[9];
                row[0]=maintainer;
                row[1]=skills;
                row[2]=vec[0];
                row[3]=vec[1];
                row[4]=vec[2];
                row[5]=vec[3];
                row[6]=vec[4];
                row[7]=vec[5];
                row[8]=vec[6];       
                maintainertab.addRow(row);
                setList(false);
                if (Planner.getActivity(currentID).getEstimatedTime() <=0){
                    JOptionPane.showMessageDialog(null,"Activity completely assigned.","Done", JOptionPane.INFORMATION_MESSAGE);                    
                    MaintainerSelectionGUI.setVisible(false);

                }
                else{
                   JOptionPane.showMessageDialog(null,"Activity partially assigned.","Done", JOptionPane.INFORMATION_MESSAGE);}
                
                PlannerVerificationGUI.setVisible(false);
            } catch (SQLException ex) {
                Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
                
            } catch (InsertException ex) {
                JOptionPane.showMessageDialog(null,"Unable to assign activity.","Error",JOptionPane.ERROR_MESSAGE); }
            
            catch (ArrayIndexOutOfBoundsException ex) {
                if (JOptionPane.showConfirmDialog(null, "Wrong Selection!", "Wrong", JOptionPane.OK_CANCEL_OPTION)>=0){
                SwingUtilities.invokeLater(new Runnable(){
                    @Override
                            public void run() {
                        try {            
                            wrongSelectionFunction();
                        } catch (SQLException ex1) {
                            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex1);
                        } catch (InsertException ex1) {
                            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex1);
                        }
            }    
           });
        }}
            }}
    }//GEN-LAST:event_MainteinerAvailabilityTableMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        firstTable=true;
        DayLab.setText("");
        try {
            setMaintainerList(currentID);
        } catch (SQLException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        backButton.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void scheduledMaintenanceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scheduledMaintenanceListMouseClicked
        forwarded=false;
        try{
            String activityid = String.valueOf(tab.getValueAt(scheduledMaintenanceList.getSelectedRow(), 0));
            String[] arrSplit = activityid.split("-");
            String num = arrSplit[0].strip();
            Integer intero = Integer.valueOf(num);
            currentID = intero;
            queryVerification(currentID);
            querySkill(currentID,tableSkills,null);
            PlannerVerificationGUI.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }catch(java.lang.ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(null, "No activity selected!", "Error!", 0);
        }
    }//GEN-LAST:event_scheduledMaintenanceListMouseClicked

    private void comboBoxWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxWeekActionPerformed
        setList(false);
    }//GEN-LAST:event_comboBoxWeekActionPerformed

    private void LabelWeekNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabelWeekNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LabelWeekNumberActionPerformed
    private void wrongSelectionFunction() throws SQLException, InsertException{

        if (firstTable==true){
        try {
            setMaintainerList(currentID);
        } catch (SQLException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else{
        int indexRow = MainteinerAvailabilityTable.getSelectedRow();
        int indexCol = MainteinerAvailabilityTable.getSelectedColumn();
        String maintainer = (String) MainteinerAvailabilityTable.getValueAt(indexRow,0);
        String skills = (String) MainteinerAvailabilityTable.getValueAt(indexRow,1);
        int fascia = indexCol-1;
        int[] vec =null;
        vec = Planner.getArray(maintainer, Planner.getActivity(currentID), daySelected);
        String[] nomi = {"Maintainer","Skills","8:00-9:00","9:00-10:00","10:00-11:00","11:00-12:00","14:00-15:00","15:00-16:00","16:00-17:00"};
            maintainertab.setRowCount(0);
            maintainertab.setColumnIdentifiers(nomi);
            Object[] row = new Object[9];
            row[0]=maintainer;
            row[1]=skills;
            row[2]=vec[0];
            row[3]=vec[1];
            row[4]=vec[2];
            row[5]=vec[3];
            row[6]=vec[4];
            row[7]=vec[5];
            row[8]=vec[6];       
            maintainertab.addRow(row);
        
    }}    
    
    private void setList(boolean initialize){
        if (initialize==true) {
        LocalDate date = LocalDate.now();
        WeekFields weekFields = WeekFields.of(Locale.getDefault());
        this.comboBoxWeek.getModel().setSelectedItem(date.get(weekFields.weekOfWeekBasedYear()));
        };
        String[] nomi = {"ID","AREA","TYPE","Estimated intervention time[min]"};
        ResultSet rst = null;
        try {
            rst = Planner.getActivities(this.comboBoxWeek.getSelectedItem().toString());
        } catch (SQLException ex) {
            Logger.getLogger(PlannerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        tab.setRowCount(0);
        tab.setColumnIdentifiers(nomi);
        Object[] row = new Object[4];
        try{
            while(rst.next()){
                row[0]=rst.getString("activityid") + " - " + rst.getString("typ");
                row[1]=rst.getString("factorysite") + " - " + rst.getString("area");
                row[2]=rst.getString("typology");
                row[3]=rst.getString("estimatedtime");
                tab.addRow(row);
            }
        }catch(SQLException ex){
            
        }
             
    }
    
    
   private void setMaintainerList(int id) throws SQLException{
       ResultSet rst = null;
       Statement st = conn.createStatement();
       Activity a = Planner.getActivity(id);
       rst= st.executeQuery("select maintainer,mc,pc,lun,mar,mer,gio,ven,sab,dom from table3('"+a.getProcedure().getNome()+"',"+ a.getWeek()+")" );
       String[] nomi = {"Maintainer","Skills","Lun","Mar","Mer","Gio","Ven","Sab","Dom"};
       maintainertab.setRowCount(0);
       maintainertab.setColumnIdentifiers(nomi);
       Object[] row = new Object[9];
        try{
            while(rst.next()){
                row[0]=rst.getString("maintainer");
                row[1]=rst.getBigDecimal("mc") + "/" + rst.getBigDecimal("pc");
                row[2]=rst.getInt("lun");
                row[3]=rst.getInt("mar");
                row[4]=rst.getInt("mer");
                row[5]=rst.getInt("gio");
                row[6]=rst.getInt("ven");
                row[7]=rst.getInt("sab");
                row[8]=rst.getInt("dom");        
                maintainertab.addRow(row);
            }
        }catch(SQLException ex){
            
        }
   }
    
    private static boolean isNumeric(String str) { 
  try {  
    Double.parseDouble(str);  
    return true;
  } catch(NumberFormatException e){  
    return false;  
  }  
}  
    private static Connection startConnection(){
        Connection conn = null;
        try {
            conn=DriverManager.getConnection(url, user, pwd);
        }
        catch(SQLException ex){
            
        }
        return conn;
    }
     private void queryVerification(int activityid) throws SQLException {
        Activity ac = Planner.getActivity(activityid);
        WorkspaceNotesArea.setText(ac.getWorkspaceNotes());
        String activityto = ac.getType()+" "+activityid + "-" + ac.getArea() + "-" + ac.getTypology() + "-" + ac.getEstimatedTime();
        LabelNWeek.setText(String.valueOf(ac.getWeek()));
        ActivitytoaLabel.setText(activityto);
        interventionArea.setText(ac.getDescription());
        if (ac.getType().equals("extra") || ac.getType().equals("EWO")){
            interventionArea.setEditable(true);
            PDFButton.setVisible(false);
            PDFLabel.setVisible(false);
            estimatedTimeEWOField.setVisible(true);
            estimatedTimeEWOLabel.setVisible(true);
        }
        else{
            interventionArea.setEditable(false);
            PDFButton.setVisible(true);
            PDFLabel.setVisible(true);
            estimatedTimeEWOField.setVisible(false);
            estimatedTimeEWOLabel.setVisible(false);
        }

    }

    private void querySkill(int activityid,JTable tab,String[] st) throws SQLException {
        Statement o = conn.createStatement();
        ResultSet rst = null;
        if (Planner.getActivity(Integer.valueOf(activityid)).getType().equals("EWO") || Planner.getActivity(Integer.valueOf(activityid)).getType().equals("extra")){
            rst = o.executeQuery("select * from competence " );
            DefaultTableModel tabskills = new DefaultTableModel(new Object[]{"",""}, 0) {
                @Override
                public Class<?> getColumnClass(int column) {
                    if (column == 1) {
                        tab.getColumnModel().getColumn(column).setMaxWidth(5);
                        return Boolean.class;
                    } else {
                        return String.class;
                    }
                }
            };
            if (forwarded){
                DefaultTableModel tabskills2 = (DefaultTableModel) tab.getModel();
                tabskills2.setRowCount(0);
                tabskills2.setColumnIdentifiers(new String[]{""});
                int num=0;
                while (num!=st.length){
                    tabskills2.addRow(new String[]{st[num]});
                    num++;
                }
            }
            else{
            tab.setModel(tabskills);
            while (rst.next()) {
                tabskills.addRow(new Object[]{rst.getString("nome")});
            }
            }
        } else {
            rst = o.executeQuery("select competence from proceduraComp where procedura=(select procedura from activity where activityId=" + activityid + ")");
            DefaultTableModel tabskills = (DefaultTableModel) tab.getModel();
            tabskills.setRowCount(0);
            tabskills.setColumnIdentifiers(new String[]{""});
            while (rst.next()) {
                tabskills.addRow(new Object[]{rst.getString("competence")});
            }
        }
        
    }
   
    private String getDay(){
        String day="";
        int indexCo= MainteinerAvailabilityTable.getSelectedColumn();
        switch(indexCo){
            case 2: day="Monday";
            break;
            case 3: day="Tuesday";
            break;
            case 4: day="Wednesday";
            break;
            case 5: day="Thursday";
            break;
            case 6: day="Friday";
            break;
            case 7: day="Saturday";
            break;
            case 8: day="Sunday";
            break;
        }
        System.out.println(indexCo);
        System.out.println(day);
        return day;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlannerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
               
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlannerGUI().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ActionType;
    private javax.swing.JTextField ActivityDescriptionTextField;
    private javax.swing.JTextField ActivityIDTextField;
    private javax.swing.JLabel ActivityLabel;
    private javax.swing.JLabel ActivityLabel1;
    private javax.swing.ButtonGroup ActivityType;
    private javax.swing.JComboBox<String> ActivityTypologyComboBox;
    private javax.swing.JLabel ActivitytoaLabel;
    private javax.swing.JTextField AreaDepartmentTextField;
    private javax.swing.JRadioButton CreateButton;
    private javax.swing.JLabel DayLab;
    private javax.swing.JLabel DayNLabel;
    private javax.swing.JRadioButton DeleteButton;
    private javax.swing.JRadioButton EWOActivityButton;
    private javax.swing.JTextField EstimatedTimeTextField;
    private javax.swing.JButton ExecuteButton;
    private javax.swing.JRadioButton ExtraActivityButton;
    private javax.swing.JTextField FactorySiteTextField;
    private javax.swing.JButton ForwardButton;
    private javax.swing.ButtonGroup InterruptibileActivity;
    private javax.swing.JLabel InterventionLabel;
    private javax.swing.JLabel LabelNWeek;
    private javax.swing.JLabel LabelSkill;
    private javax.swing.JLabel LabelWeek;
    private javax.swing.JTextField LabelWeekNumber;
    private javax.swing.JLabel Labelact;
    private javax.swing.JFrame MaintainerSelectionGUI;
    private javax.swing.JTable MainteinerAvailabilityTable;
    private javax.swing.JTextField MaterialsTextField;
    private javax.swing.JRadioButton ModifyButton;
    private javax.swing.JRadioButton NoButton;
    private javax.swing.JButton PDFButton;
    private javax.swing.JLabel PDFLabel;
    private javax.swing.JRadioButton PlannedActivityButton;
    private javax.swing.JFrame PlannerRecordGUI;
    private javax.swing.JFrame PlannerVerificationGUI;
    private javax.swing.JComboBox<String> WeekComboBox;
    private javax.swing.JLabel WeekLabel;
    private javax.swing.JLabel WorkspaceLabel;
    private javax.swing.JTextArea WorkspaceNotes;
    private javax.swing.JTextArea WorkspaceNotesArea;
    private javax.swing.JTextArea WorkspaceTextArea3;
    private javax.swing.JLabel Workspacenotes3;
    private javax.swing.JRadioButton YesButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton buttonManageMaintenance;
    private javax.swing.JComboBox<String> comboBoxWeek;
    private javax.swing.JTextField estimatedTimeEWOField;
    private javax.swing.JLabel estimatedTimeEWOLabel;
    private javax.swing.JTextArea interventionArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable scheduledMaintenanceList;
    private javax.swing.JTable tableSkills;
    private javax.swing.JTable tableSkills2;
    // End of variables declaration//GEN-END:variables
}
